# Задание 1 Реализовать скрипт, в котором должна быть предусмотрена
# функция расчета заработной платы сотрудника. В расчете необходимо
# использовать формулу: (выработка в часах*ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать
# скрипт с параметрами.
def slr_calculation():
    try:
        time = float(input('Выработка в часах: '))
        salary = float(input('Ставка в час: '))
        bonus = float(input('Премия: '))
        result = time * salary + bonus
        print('Задание 1. Результат:', f'ЗП сотрудника  {result}')
    except ValueError:
        return print('введите числовое значение')
slr_calculation()


# Задание 2 Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

numb_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

res_list = [item for i, item in enumerate(numb_list[1:]) if item > numb_list[i]]
print('Задание 2. Результат:', res_list)

# Задание 3 Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

print('Задание 3. Результат:',  [x for x in range(20, 240 + 1) if x % 20 == 0 or x % 21 == 0])

# Задание 4 Представлен список чисел. Определить элементы списка,
# не имеющие повторений. Сформировать итоговый массив чисел,
# соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

numb_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
res_list = [x for x in numb_list if numb_list.count(x) == 1]
print('Задание 4. Результат: ', res_list)

# Задание 5 Реализовать формирование списка, используя функцию range()
# и возможности генератора. В список должны войти четные числа
# от 100 до 1000 (включая границы). Необходимо получить результат
# вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

list_numb = [el for el in range(100, 1001) if el % 2 == 0]
print('Задание 5. Четные числа:', list_numb)
from functools import reduce
def my_func(el_p, el):
    return el_p * el
print('Задание 5. Произведение:', reduce(my_func, list_numb))

# Задание 6 Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного.
# Например, в первом задании выводим целые числа, начиная с 3,
# а при достижении числа 10 завершаем цикл.
def var1():
    number = int(input('Введите число: '))
    from itertools import islice
    from itertools import count

    for i in islice(count(number), 10): #завершаем цыкл при достижении 1 дес.
        print(i)

var1()
print('Задание 6. Var1 - выполнено')

# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# #прекращаем цыкл повторений после 5ого повторения
def var2():
    el_list = [5, 20, 'Cool', 100.1]

    from itertools import islice
    from itertools import cycle

    for el in islice(cycle(el_list), 5):
        print(el)
var2()
print('Задание 6. Var2 - выполнено')

# Задание 7 Реализовать генератор с помощью функции с ключевым словом yield,
# создающим очередное значение. При вызове функции должен создаваться
# объект-генератор. Функция должна вызываться следующим образом:
# for el in fact(n). Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Выводим только первые 4 цыфры факториала

from itertools import count
from math import factorial

def el_generator():
    for el in count(1):
        yield factorial(el)
var = el_generator()
n = 0
for el in var:
    if n < 4:
        print(el)
        n += 1
    else:
        break
print('Задание 7 - выполнено')

